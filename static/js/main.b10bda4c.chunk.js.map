{"version":3,"sources":["assets/img/twitter.png","components/Header/Header.js","components/ModalContainer/ModalContainer.js","components/FormSendTweet/FormSendTweet.js","components/SendTweet/SendTweet.js","utils/contants.js","components/Tweet/Tweet.js","components/ListTweets/ListTweets.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","TwitterLogo","alt","ModalContainer","props","isOpenModal","closeModal","children","Modal","open","onClose","closeAfterTransition","FormSendTweet","sendTweet","useState","name","tweet","formValue","setFormValue","onSubmit","e","onChange","target","value","FormControl","FormGroup","TextField","type","placeholder","margin","multiline","rows","Button","SendTweet","setToastProps","allTweets","setIsOpenModal","Fab","color","arial-label","onClick","preventDefault","allTweetsArray","time","moment","push","localStorage","setItem","JSON","stringify","text","Tweet","index","deleteTweet","console","log","Card","CardContent","format","ListTweets","length","Grid","container","spacing","map","key","item","xs","App","toastProps","setAllTweets","reloadTweets","setReloadTweets","useEffect","AllTweetsStorage","getItem","parse","Container","maxWidth","splice","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","message","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.b10bda4c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/twitter.400dc885.png\";","import React from 'react';\r\nimport TwitterLogo from '../../assets/img/twitter.png';\r\n\r\nimport './Header.scss';\r\n\r\nexport default function Header() {\r\n   return (\r\n      <div className=\"header\">\r\n         <img src={TwitterLogo} alt=\"Tweets simulator\" />\r\n         <h1>Tweets Simulator</h1>\r\n      </div>\r\n   );\r\n}","import React from 'react';\r\nimport { Modal } from \"@material-ui/core\";\r\n\r\nimport './ModalContainer.scss';\r\n\r\nexport default function ModalContainer(props) {\r\n   \r\n   const { isOpenModal, closeModal, children } = props;\r\n\r\n   return (\r\n      <Modal\r\n         className=\"modal-container\"\r\n         open={isOpenModal}\r\n         onClose={closeModal}\r\n         closeAfterTransition\r\n      >\r\n         <div>\r\n            {children}\r\n         </div>\r\n      </Modal>\r\n   );\r\n}","import React, { useState } from 'react'; \r\nimport { FormControl, FormGroup, TextField, Button } from \"@material-ui/core\";\r\n\r\nimport './FormSendTweet.scss';\r\n\r\nexport default function FormSendTweet(props) {\r\n   const { sendTweet } = props;\r\n   const [ formValue, setFormValue ] = useState({\r\n      name: \"\",\r\n      tweet: \"\"\r\n   });\r\n\r\n   const onFormChange = (e) => {\r\n      setFormValue({\r\n         ...formValue,\r\n         [e.target.name]: e.target.value\r\n      });\r\n   };\r\n\r\n   return (\r\n      <div className=\"form-send-tweet\">\r\n         <h2 className=\"form-send-tweet__title\">Enviar Tweet</h2>\r\n         <form className=\"form-send-tweet__form\"\r\n            onSubmit={e => sendTweet(e, formValue)}\r\n            onChange={onFormChange}\r\n         >\r\n            <FormControl>\r\n               <FormGroup>\r\n                  <TextField\r\n                     className=\"form-send-tweet__form-name\"\r\n                     type=\"text\"\r\n                     name=\"name\"\r\n                     placeholder=\"Nombre de usuario\"\r\n                     margin=\"normal\"\r\n                  />\r\n               </FormGroup>\r\n               <FormGroup>\r\n                  <TextField\r\n                     className=\"form-send-tweet__form-textarea\"\r\n                     name=\"tweet\"\r\n                     multiline\r\n                     rows=\"6\"\r\n                     placeholder=\"Escribe tu tweet..\"\r\n                     margin= \"normal\"\r\n                  />\r\n               </FormGroup>\r\n               <FormGroup>\r\n                  <Button type=\"submit\">Enviar Tweet</Button>\r\n               </FormGroup>\r\n            </FormControl>\r\n         </form>\r\n     </div>\r\n   );\r\n}","import React, { useState } from 'react';\r\nimport { Fab } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport moment from 'moment';\r\nimport ModalContainer from '../ModalContainer';\r\nimport FormSendTweet from '../FormSendTweet';\r\nimport { TWEETS_STORAGE } from '../../utils/contants';\r\n\r\nimport './SendTweet.scss';\r\n\r\n\r\nexport default function SendTweet(props) {\r\n   const { setToastProps, allTweets } = props;\r\n   \r\n   const [isOpenModal, setIsOpenModal] = useState(false);\r\n   \r\n   const openModal = () => {\r\n      setIsOpenModal(true);\r\n   };\r\n\r\n   const closeModal = () => {\r\n      setIsOpenModal(false);\r\n   };\r\n\r\n   const sendTweet = (e, formValue) => {\r\n      e.preventDefault();\r\n      const { name, tweet } = formValue;\r\n      let allTweetsArray = [];\r\n      \r\n      if (allTweets) {\r\n         allTweetsArray = allTweets;\r\n      }\r\n\r\n      if (!name || !tweet) {\r\n         setToastProps({\r\n            open: true,\r\n            text: \"TODOS LOS CAMPOS SON OBLIGATORIOS\"\r\n         })\r\n      } else {\r\n         formValue.time = moment();\r\n         allTweetsArray.push(formValue);\r\n         localStorage.setItem(TWEETS_STORAGE, JSON.stringify(allTweetsArray));\r\n         setToastProps({\r\n            open: true,\r\n            text: \"Tweet enviado correctamente\"\r\n         })\r\n         closeModal();\r\n      }\r\n      allTweetsArray = [];\r\n   };\r\n\r\n   return (\r\n      <div className=\"send-tweet\">\r\n         <Fab\r\n            className=\"send-tweet__open-modal\"\r\n            color=\"primary\"\r\n            arial-label=\"add\"\r\n            onClick={openModal}\r\n         >\r\n            <AddIcon />\r\n         </Fab>\r\n\r\n         <ModalContainer\r\n            isOpenModal={isOpenModal}\r\n            closeModal= {closeModal}\r\n         >\r\n            <FormSendTweet sendTweet={sendTweet}/>\r\n         </ModalContainer>\r\n      </div>\r\n   )\r\n}","export const TWEETS_STORAGE = \"tweet-lt\";","import React from 'react';\r\nimport { Card, CardContent } from '@material-ui/core';\r\nimport DeleteTwoToneIcon from '@material-ui/icons/DeleteTwoTone';\r\nimport moment from 'moment';\r\n\r\nimport './Tweet.scss';\r\n\r\nexport default function Tweet(props) {\r\n   const {\r\n      tweet: { name, tweet, time },\r\n      index,\r\n      deleteTweet\r\n   } = props;\r\n   \r\n   console.log(tweet);\r\n   \r\n   \r\n   return (\r\n      <Card className=\"tweet\">\r\n         <CardContent>\r\n            <div className=\"tweet__header\">\r\n               <h5>{name}</h5>\r\n               <DeleteTwoToneIcon onClick={() => deleteTweet(index)} />\r\n            </div>\r\n               <p>{tweet}</p>\r\n            <div className=\"tweet__date-add-tweet\">\r\n               {moment(time).format('DD/MM/YYYY HH:MM')}\r\n            </div>\r\n         </CardContent>\r\n      </Card>\r\n   )\r\n}\r\n\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport Tweet from '../Tweet';\r\n\r\nimport './ListTweets.scss';\r\n\r\nexport default function ListTweets(props) {\r\n   const { allTweets, deleteTweet } = props;\r\n   \r\n   if (!allTweets || allTweets.length === 0) {\r\n      return (\r\n         <div className=\"list-tweets-empty\">\r\n            <h2>No hay tweets...</h2>\r\n         </div>\r\n      )\r\n   }\r\n  \r\n   return (\r\n      <Grid container spacing={3} className=\"list-tweets\">\r\n         {allTweets.map((tweet, index) => (\r\n         <Grid key={index} item xs={4}>\r\n               <Tweet\r\n                  tweet={tweet} index={index} deleteTweet={deleteTweet}\r\n               />\r\n            </Grid>\r\n         ))}\r\n      </Grid>\r\n   );\r\n}","import React, { useState, useEffect } from 'react';\nimport { Container, Snackbar } from \"@material-ui/core\";\nimport Header from \"./components/Header\";\nimport SendTweet from \"./components/SendTweet\";\nimport ListTweets from \"./components/ListTweets\";\n\nimport { TWEETS_STORAGE } from './utils/contants';\n\nfunction App() {\n  \n  const [toastProps, setToastProps] = useState({\n    open: false,\n    text: null\n  });\n\n  const [allTweets, setAllTweets] = useState([]);\n  const [reloadTweets, setReloadTweets] = useState(false); \n\n  useEffect(() => {\n    const AllTweetsStorage = localStorage.getItem(TWEETS_STORAGE);\n    const allTweetsArray = JSON.parse(AllTweetsStorage);\n    setAllTweets(allTweetsArray);\n    setReloadTweets(false);\n  }, [reloadTweets]);\n\n  const deleteTweet = (index) => {\n    allTweets.splice(index, 1);\n    setAllTweets(allTweets);\n    localStorage.setItem(TWEETS_STORAGE, JSON.stringify(allTweets));\n    setReloadTweets(true);\n  };\n\n\n  return (\n    <Container className=\"twets-simulator\" maxWidth={false}>\n      <Header />\n      <SendTweet setToastProps={setToastProps} allTweets={allTweets} />\n      <ListTweets\n        allTweets={allTweets}\n        deleteTweet={deleteTweet}\n      />\n\n      <Snackbar\n        anchorOrigin={{\n          vertical: \"top\",\n          horizontal: \"right\"\n        }}\n        open={toastProps.open}\n        autoHideDuration={10}\n        message={<span id=\"message-id\">{toastProps.text}</span>}\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}